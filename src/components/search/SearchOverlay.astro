---
import SearchInput from './SearchInput.astro';
import SearchResults from './SearchResults.astro';
import { articles } from '../../data/articles';
---

<div 
  id="search-overlay"
  class="fixed inset-0 z-[100] opacity-0 pointer-events-none"
>
  <div class="absolute inset-0 bg-gradient-to-b from-[#0a0a0a]/95 to-[#120a1a]/95 backdrop-blur-xl transition-opacity duration-500"></div>
  
  <div class="relative h-full overflow-hidden">
    <div class="absolute inset-0 overflow-hidden">
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(237,28,36,0.03)_0%,transparent_100%)]"></div>
      <div class="absolute inset-0" style="background: repeating-linear-gradient(to right, rgba(255,255,255,0.03) 1px, transparent 1px, transparent 50px), repeating-linear-gradient(to bottom, rgba(255,255,255,0.03) 1px, transparent 1px, transparent 50px);"></div>
    </div>

    <div class="relative container mx-auto px-4 pt-24">
      <div class="max-w-2xl mx-auto space-y-8">
        <div class="text-center mb-8">
          <h2 class="text-4xl font-sans font-black text-white/90 mb-2">Search Articles</h2>
          <p class="text-white/50 font-mono">Press ESC to close</p>
        </div>

        <div class="transform transition-all duration-500 translate-y-8 opacity-0" id="search-container">
          <SearchInput />
          <div id="search-results" class="mt-8">
            <SearchResults articles={[]} searchTerm="" />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { searchArticles } from '../../utils/search';
  import { articles } from '../../data/articles';

  class SearchOverlay {
    private overlay: HTMLElement | null;
    private container: HTMLElement | null;
    private input: HTMLInputElement | null;
    private resultsContainer: HTMLElement | null;
    private isOpen: boolean = false;
    private debounceTimeout: number | null = null;

    constructor() {
      this.overlay = document.getElementById('search-overlay');
      this.container = document.getElementById('search-container');
      this.input = document.getElementById('search-input') as HTMLInputElement;
      this.resultsContainer = document.getElementById('search-results');
      
      this.init();
    }

    private init() {
      this.input?.addEventListener('input', (e) => {
        this.handleSearch((e.target as HTMLInputElement).value);
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.close();
        }
      });

      this.overlay?.addEventListener('click', (e) => {
        if (e.target === this.overlay) {
          this.close();
        }
      });

      window.toggleSearch = this.toggle.bind(this);
    }

    private handleSearch(query: string) {
      if (this.debounceTimeout) {
        clearTimeout(this.debounceTimeout);
      }

      this.debounceTimeout = window.setTimeout(() => {
        const results = query ? searchArticles(query, articles).slice(0, 5) : [];
        this.updateResults(results, query);
      }, 300);
    }

    private updateResults(results: any[], query: string) {
      if (!this.resultsContainer) return;

      const resultsHtml = `
        <div class="space-y-4">
          ${results.length > 0 ? results.map(article => `
            <a 
              href="/articles/${article.slug}"
              class="group block"
            >
              <div class="relative bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-white/10 overflow-hidden transition-all duration-500 hover:bg-black/30 hover:border-white/20">
                <div class="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                <div class="relative">
                  <h3 class="font-sans font-black text-xl text-white/90 mb-3 group-hover:text-primary transition-colors duration-300">
                    ${article.title}
                  </h3>
                  <div class="flex items-center gap-4 text-sm text-white/60">
                    <span class="font-medium">${article.author}</span>
                    <time datetime="${article.date.toISOString()}" class="font-mono">
                      ${new Date(article.date).toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric', 
                        year: 'numeric' 
                      })}
                    </time>
                  </div>
                </div>
              </div>
            </a>
          `).join('') : `
            <div class="text-center py-12">
              <p class="text-white/60 mb-2 text-lg">No results found for "${query}"</p>
              <p class="text-white/40">Try different keywords or check your spelling</p>
            </div>
          `}
        </div>
      `;

      this.resultsContainer.innerHTML = resultsHtml;
    }

    public toggle(open?: boolean) {
      this.isOpen = open ?? !this.isOpen;

      if (this.overlay && this.container) {
        this.overlay.classList.toggle('opacity-0', !this.isOpen);
        this.overlay.classList.toggle('pointer-events-none', !this.isOpen);
        
        // Animate search container
        setTimeout(() => {
          this.container?.classList.toggle('translate-y-8', !this.isOpen);
          this.container?.classList.toggle('opacity-0', !this.isOpen);
        }, this.isOpen ? 100 : 0);
      }

      if (this.isOpen) {
        document.body.style.overflow = 'hidden';
        this.input?.focus();
      } else {
        document.body.style.overflow = '';
        if (this.input) {
          this.input.value = '';
        }
        this.updateResults([], '');
      }
    }

    private close() {
      this.toggle(false);
    }
  }

  new SearchOverlay();
</script>

<script>
  declare global {
    interface Window {
      toggleSearch: (open?: boolean) => void;
    }
  }
</script>