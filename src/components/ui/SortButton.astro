---
import type { SortOption } from '../../types';

interface Props {
  currentSort: SortOption;
}

const { currentSort } = Astro.props;

const options: { value: SortOption; label: string }[] = [
  { value: 'newest', label: 'Newest First' },
  { value: 'oldest', label: 'Oldest First' },
  { value: 'title', label: 'By Title' },
];
---

<div class="relative">
  <button 
    id="sort-button"
    class="flex items-center gap-2 px-3 py-1.5 text-xs font-mono text-white/70 bg-white/5 rounded-full border border-white/10 transition-all duration-300 hover:bg-white/10 hover:border-white/20"
  >
    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <line x1="21" y1="10" x2="3" y2="10"></line>
      <line x1="21" y1="6" x2="3" y2="6"></line>
      <line x1="21" y1="14" x2="3" y2="14"></line>
      <line x1="21" y1="18" x2="3" y2="18"></line>
    </svg>
    Sort
  </button>

  <div 
    id="sort-dropdown"
    class="absolute right-0 mt-2 w-40 bg-black/90 backdrop-blur-xl border border-white/10 rounded-lg shadow-xl hidden"
  >
    {options.map(option => (
      <button
        data-sort={option.value}
        class:list={[
          "w-full px-4 py-2 text-left text-sm transition-colors duration-300",
          currentSort === option.value ?
            "text-white bg-white/10" :
            "text-white/70 hover:bg-white/5"
        ]}
      >
        {option.label}
      </button>
    ))}
  </div>
</div>

<script>
  const button = document.getElementById('sort-button');
  const dropdown = document.getElementById('sort-dropdown');
  let isOpen = false;

  function toggleDropdown() {
    isOpen = !isOpen;
    if (isOpen) {
      dropdown?.classList.remove('hidden');
    } else {
      dropdown?.classList.add('hidden');
    }
  }

  button?.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleDropdown();
  });

  document.addEventListener('click', () => {
    if (isOpen) {
      toggleDropdown();
    }
  });

  // Handle sort selection
  dropdown?.querySelectorAll('button[data-sort]').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const sortValue = (e.currentTarget as HTMLButtonElement).dataset.sort;
      if (sortValue) {
        const event = new CustomEvent('sort-changed', { 
          detail: { sortBy: sortValue }
        });
        document.dispatchEvent(event);
      }
      toggleDropdown();
    });
  });
</script>